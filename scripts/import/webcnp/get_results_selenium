#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##

# Setup command line parser
import argparse
parser = argparse.ArgumentParser( description="Retrieve CSV spreadsheet from WebCNP database at U Penn" )
parser.add_argument( "-v", "--verbose", help="Verbose operation", action="store_true" )
parser.add_argument( "--from-date", help="Retrieve only records from the specific date onwards. Give date as 'YYYY-MM-DD'.", action="store" )
parser.add_argument( "--last-month", help="Retrieve only records of the last month.", action="store_true" )
parser.add_argument( "--last-3-months", help="Retrieve only records of the last 3 months.", action="store_true" )
parser.add_argument( "--last-year", help="Retrieve only records of the last year.", action="store_true" )
parser.add_argument("-p", "--post-to-github", help="Post all issues to GitHub instead of std out.", action="store_true")
parser.add_argument("-t","--time-log-dir",
                    help="If set then time logs are written to that directory",
                    action="store",
                    default=None)
parser.add_argument( "out_dir", help="Directory for output files" )

args = parser.parse_args()
# Import everything we need from Selenium
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC

import os
import glob
import sys

import sibispy
from sibispy import sibislogger as slog

slog.init_log(args.verbose, args.post_to_github,'NCANDA Import', 'get_results_selenium', args.time_log_dir)
slog.startTimer1()

# Switch to temp directory
original_wd = os.getcwd()
if not os.path.exists( args.out_dir ):
    os.mkdir( args.out_dir )
os.chdir( args.out_dir )

# Remove old partfiles to avoid infinite wait later
for partfile in glob.glob( '*.csv.part' ):
    os.remove( partfile )

# Check if config file exists - read user name and password if it does, bail otherwise
sibis_session = sibispy.Session()
if not sibis_session.configure() :
    slog("get_results_selenium","Error: session configure file was not found")
    sys.exit()

browser = sibis_session.connect_server('browser_penncnp', True)
if not browser: 
    slog("get_results_selenium","Error: could not connect to penncnp")
    sys.exit()

# Wait for export form and fill appropriately
wait = sibis_session.initialize_penncnp_wait()
export = sibis_session.get_penncnp_export_report(wait)
if not export:
    sys.exit(1)

browser.find_element_by_name("incomplete").click()

# If "from-date" was given, select date range
if args.from_date:
    browser.find_element_by_name("date_of_test").send_keys( ">>" ) # this selects ">="
    browser.find_element_by_name("date_of_test_date").send_keys( args.from_date )
else:
    # If "last-month" was given, select that option
    if args.last_month:
        browser.find_element_by_name("date_of_test").send_keys( "ll" ) # this selects "Last Month"
    elif args.last_3_months:
        browser.find_element_by_name("date_of_test").send_keys( "lll" ) # this selects "Last 3 Months"
    elif args.last_year:
        browser.find_element_by_name("date_of_test").send_keys( "llll" ) # this selects "Last Year"

# Click "export" button now.
export.click()

# Wait for "Download" link, start download
download = wait.until(EC.element_to_be_clickable((By.NAME,'download_excel')))
download.click()
logout =  wait.until(EC.element_to_be_clickable((By.LINK_TEXT,'Logout')))

# At this point, the file should download and save automatically. We need to wait for that to complete.
while glob.glob( '*.csv.part' ):
    pass

# To clean up, log out of CNP system and quit browser
logout.click()
sibis_session.disconnect_penncnp()

# Change back to original working directory
os.chdir( original_wd )

slog.takeTimer1("script_time") 
