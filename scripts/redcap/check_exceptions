#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##

# system packages
import sys
import hashlib

import sibispy
from sibispy import sibislogger as slog

# Enrollnemt criteria: Maximum number of days drinking by age.
max_days_drinking_by_age = { 12 : 5, 13 : 5, 14 : 7, 15 : 16, 16 : 31, 17 : 53, 18 : 81, 19 : 123, 20 : 171, 21 : 238 }

# Check enrollment exceptions against collected data
def validate_exceptions(project_interface,strict=False):
    # get a list of dictionaries representing Demographics forms
    records = project_interface.export_records(fields=["exclude","sex","age","enroll_exception","mri_xnat_sid",
                                                       "mrireport_mri_set2_binge_mrilu3_mrilud","mrireport_mri_set1_mrilu2_mrilud",
                                                       "youthreport1_cddr27","youthreport1_cddr19","youthreport1_cddr26"], events=['baseline_visit_arm_1'], event_name='unique')

    false_neg = []
    false_pos = []
    true_pos = []

    # check each record
    count_subjects = 0
    for record in records:
        if record['exclude'] == '1':
            continue

        count_subjects += 1

        try:
            age = int( float( record['age'] ) )
        except:
            print "Could not get age for subject",record['study_id']
            continue

        exception = False
        criteria = [ 'age=%s'%age ]
        if record['youthreport1_cddr19'] != '' and int( record['youthreport1_cddr19'] ) > max_days_drinking_by_age[ min( 21, max( 12, age ) ) ]:
            exception = True
            criteria.append( 'cddr19='+record['youthreport1_cddr19'] )

        if record['youthreport1_cddr27'] != '' and record['youthreport1_cddr27'] == '1':
            exception = True
            criteria.append( 'cddr27='+record['youthreport1_cddr27'] )

        if record['mrireport_mri_set2_binge_mrilu3_mrilud'] not in [ '.', '', '0' ]:
            if strict or record['mrireport_mri_set1_mrilu2_mrilud'] not in [ '.', '', '0' ]:
                exception = True
                criteria.append( 'mrilu3='+record['mrireport_mri_set2_binge_mrilu3_mrilud']+'&mrilu2='+record['mrireport_mri_set1_mrilu2_mrilud'] )

        if age < 14:
            if record['sex'] == '0':
                if record['youthreport1_cddr26'] != '' and float( record['youthreport1_cddr26'] ) > 2:
                    exception = True
                    criteria.append( 'cddr26='+record['youthreport1_cddr26'] )
            else:
                if record['youthreport1_cddr26'] != '' and float( record['youthreport1_cddr26'] ) > 3:
                    exception = True
                    criteria.append( 'cddr26='+record['youthreport1_cddr26'] )

        if exception and record['enroll_exception___drinking'] == '0':
            false_neg.append( ( record['study_id'], record['mri_xnat_sid'], criteria ) )

        if not exception and record['enroll_exception___drinking'] == '1':
            false_pos.append( ( record['study_id'], record['mri_xnat_sid'] ) )

        if exception and record['enroll_exception___drinking'] == '1':
            true_pos.append( ( record['study_id'], record['mri_xnat_sid'], criteria ) )

    return (count_subjects,false_neg,false_pos,true_pos)


# For a list of subject ID, set the "exception" flag
def update_false_negatives( project_interface, subjects ):
    upload = [ { 'study_id' : subject, 'redcap_event_name' : 'baseline_visit_arm_1', 'enroll_exception___drinking' : '1' } for subject in subjects ]

    import_response = project_interface.import_records( upload, overwrite='overwrite' )

    if 'count' in import_response.keys():
        if str( import_response['count'] ) == str( len ( upload ) ):
            list_subjects = ''.join(subjects)
            error = 'INFO: updated drinking exception status for the following false-negative subjects'
            slog.info('check_exceptions {}'.format(list_subjects).hexdigest()[0:6], error,
                        list_subjects=list_subjects )
        else:
            error = 'ERROR: uploading updated drinking exception error'
            updated_drinking_exception_count = len(upload)
            false_neg_subjects_count = import_response['count']
            slog.info('check_exceptions {} {}'.format(updated_drinking_exception_count, false_neg_subjects_count).hexdigest()[0:6], error,
                      updated_drinking_exception_count=str(updated_drinking_exception_count),
                      false_neg_subjects_count=str(false_neg_subjects_count))
    else:
        error = 'ERROR: uploading updated drinking exception error, key "count" not found in metadata'
        slog.info(
            'check_exceptions {}'.format(error).hexdigest()[
            0:6], error,
            import_response_dictionary=str(import_response))


if __name__ == "__main__":
    import argparse

    # setup the argument parser and help text
    parser = argparse.ArgumentParser(prog='check_exceptions',
                                     description='Check enrollment exceptions (e.g., exceeded baseline drinking levels) \
                                     marked in the Basic Demographics form against collected data.')
    parser.add_argument('--strict', action="store_true", default=False,
                        help='Apply strict checking without any second-guessing of REDCap data.')
    parser.add_argument('--update-fn', action="store_true", default=False,
                        help='Update False Negative cases, i.e., mark subjects as exceptions when they exceed baseline \
                        drinking levels. This will disable the default output of subjects by drinking group.')
    parser.add_argument("-p", "--post-to-github", help="Post all issues to GitHub instead of std out.",
                        action="store_true")
    parser.add_argument("-t", "--time-log-dir",
                        help="If set then time logs are written to that directory (e.g. /fs/ncanda-share/ncanda-data-log/crond)",
                        action="store",
                        default=None)
    args = parser.parse_args()

    slog.init_log(args.verbose, args.post_to_github, 'NCANDA ', 'check_exceptions',
                  args.time_log_dir)
    slog.startTimer1()

    session = sibispy.Session()
    if not session.configure():
        if args.verbose:
            print "Error: session configure file was not found"

        sys.exit()

    # get a connection to redcap
    project_interface = session.connect_server('data_entry', True)
    if not project_interface :
        if args.verbose:
            print "Error: Could not connect to Redcap"
        sys.exit()

    (count_subjects,false_neg,false_pos,true_pos) = validate_exceptions(project_interface,strict=args.strict)

    global count_subjects_checked
    count_subjects_checked = count_subjects

    if args.update_fn:
        if len( false_neg ):
            update_false_negatives( project_interface, [ subject for (subject,sid,criteria) in false_neg ] )
    else:
        error_false_neg = 'Exceed criteria but NOT marked as exceptions'
        error_false_pos = 'Marked as exceptions but do NOT exceed criteria'
        error_true_pos = 'Marked as exceptions and DO exceed criteria'

        validate_exceptions_errors = {'false_neg' :  [false_neg, len(false_neg), error_false_neg], \
                                      'false_pos' : [false_pos, len(false_pos), error_false_pos], \
                                      'true_pos' : [true_pos, len(true_pos), error_true_pos]}

        for key, value in validate_exceptions_errors.iteritems():
            if value[1] == 0: continue
            list_subject = ''.join(value[0])
            slog.info(hashlib.sha1('check_exceptions {}'.format(list_subject)).hexdigest()[0:6], value[2],
                      list_subject=list_subject)


slog.takeTimer1("script_time","{'Records': " +  str(count_subjects_checked) + "}")

