#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##

from __future__ import print_function
import datetime
from matplotlib.dates import date2num
from prettytable import PrettyTable
import numpy as np

import os
from sibispy.xnat_util import get_xnat_util

interface = get_xnat_util()
 
#unique elements of a list
def unique(seq, idfun=None): 
   # order preserving
   if idfun is None:
       def idfun(x): return x
   seen = {}
   result = []
   for item in seq:
       marker = idfun(item)
       if marker in seen: continue
       seen[marker] = 1
       result.append(item)
   return result
# get the date into a friendly format
def numconv(dt):
    dd = datetime.datetime.strptime(dt, "%Y-%m-%d")
    return dd
 
#extract all session ids with session insert date, session project and sesion scan date
sess = interface.search( 'xnat:mrSessionData', ['xnat:mrSessionData/SESSION_ID','xnat:mrSessionData/INSERT_DATE','xnat:mrSessionData/PROJECT','xnat:mrSessionData/DATE']).all().items()
 
#numpy verrsion of the above information matrix
nns = np.array(sess)
 
# the difference in days between  insert date and scan date, i.e the delays    
datdiff=np.array([date2num(numconv(ins[0:10])) for ins in nns[:,1]])-np.array([date2num(numconv(ee[0:10])) for ee in nns[:,3]])
# create the first row with the stat labels
x = PrettyTable(["Days", "Average", "Median", "Maximum","Minimum","Standard Dev"])
#for a project in a unique list of projects
for inpt in unique(nns[:,2]):
   x.add_row(['','','','','',''])    
   x.add_row([inpt,'','','','',''])
   #for interval of 8 days...to infinity        
   for interv in [8,31, 61, float('inf')]:
      
      sinterv = str(interv)
      #get the correct delay based on 1).project, and 2).interval
      delays=datdiff[np.where(np.logical_and(inpt == nns[:,2] , (np.array(date2num(datetime.datetime.today())) -np.array([date2num(numconv(ins[0:10])) for ins in nns[:,1]])) < interv  ))]
      
      #statistics
      if len( delays ):
         aved = round(np.average(delays),1)
         stdd= round(np.std(delays),1)
         medi = round(np.median(delays),1) 
         maxim = round(max(delays),1)
         minim = round(min(delays),1)
         x.add_row([sinterv,aved,medi,maxim,minim,stdd])
      else:
         x.add_row([sinterv,0,0,0,0,0])
# fix column alignment    
x.align = "r"
#x.align['Day'] = "c"
print(x)
