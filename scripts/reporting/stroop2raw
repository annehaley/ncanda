#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##
import os
import re
import csv
import sys
import argparse

# Setup command line parser
parser = argparse.ArgumentParser( description="Reads important parameters out of e-Prime Stroop log file turns it into a CSV file (not to be used for importing to redcap" )
parser.add_argument( "-v", "--verbose", help="Verbose operation", action="store_true")
parser.add_argument( "infile", help="Input .txt Stroop file (as generated by e-Prime).")
parser.add_argument( "outfile", help="Output file name without .csv")
args = parser.parse_args()

# so files of type /fs/storage/laptops/ncanda/*/*/NCANDAStroopMtS_3cycles_7m53stask_100SD.txt are binary (file -b --mime-type <file> returns text/x-diff)
file = open( args.infile, 'rb').read().decode('utf-16').split("\r\n")
output_file = open( args.outfile +".csv", 'w' )
wr = csv.writer( output_file, quoting=csv.QUOTE_ALL)


procedure='Procedure'
running='Running'
rt='RT'
resp='RESP'
cresp='CRESP'

for s in file:
    if "Procedure:" in s and "Block" not in s:
        wr.writerow([procedure,running,rt,resp,cresp])
        
        procedure=s[s.find(":")+2:]
        if procedure == "" :
            print("ERROR: do not know how to process")
            sys.exit()
        running=''
        rt=''
        resp=''
        cresp=''
        
    elif ("Running:" in s) and ("ListRun" not in s):
        if running != '': 
            print("ERROR: running", s)
            sys.exit()
        running=s[s.find(":")+2:]

    elif (".RT:" in s) and ("RTI" not in s):
        if rt != '' :
            print("ERROR: rt", s)
            sys.exit()
        rt=s[s.find(":")+2:]

    elif (".RESP:" in s) and ("RTI" not in s):
        if resp != '' :
            print("ERROR: resp", s)
            sys.exit()
        resp=s[s.find(":")+2:]
        
    elif (".CRESP:" in s) and ("RTI" not in s):
        if cresp != '' :
            print("ERROR: cresp", s)
            sys.exit()
        cresp=s[s.find(":")+2:]

    elif ("Level: 1" in s) :
        # finished 
        break

wr.writerow([procedure,running,rt,resp,cresp])
output_file.close()


    
