#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##

import os
import re
import json
import time
import argparse
import datetime
import yaml
import pyxnat
import sys

import sibispy
from sibispy import sibislogger as slog

from xnat_email import XnatEmail

#
# Functions
#

# Get a custom variable from XML representation of experiment
def get_custom_variable(eid,  exp_get, field_name ):
    field_regex = '.*<xnat:field name="%s">(.*?)</xnat:field>' % field_name
    xnat_output = None
    try:
           match = re.match(field_regex, exp_get, flags=re.DOTALL)
    except Exception as e:
        slog.info(eid, "ERROR: failed to create xml document from experiment obj for '" + str(field_name) +"'",
                  info = "Please check if eid still exists in xnat. If not ignore error and otherwise run ./check_phantom_scans -e " + eid,
                  error_msg=str(e),
                  xnat_api_output = xnat_output)

        return None

    if match:
        return re.sub('\s*<!--.*?-->\s*', '', match.group(1), flags=re.DOTALL)
    else:
        return None


# Find a phantom scan within 24h of the given experiment
def find_phantom_scan_24h(prj, experiment_label, seid, experiment_last_modified, phantom_id, edate, etime, scanner):
    # Compute the date before and after the experiment date
    this_date = datetime.datetime.strptime(edate, '%Y-%m-%d')
    edate_tomorrow = (this_date + datetime.timedelta(1)).strftime('%Y-%m-%d')
    edate_yesterday = (this_date - datetime.timedelta(1)).strftime('%Y-%m-%d')

    # Search for all sessions on previous day after given time, or next day before given time (we already know there isn't a scan on the same date)
    constraints = [('xnat:mrSessionData/SUBJECT_ID','LIKE',phantom_id), 'AND',
                   [[('xnat:mrSessionData/DATE', '=', edate_yesterday), ('xnat:mrSessionData/TIME', '>=', etime), 'AND'],
                    [('xnat:mrSessionData/DATE', '=', edate_tomorrow), ('xnat:mrSessionData/TIME', '<=', etime), 'AND'], 'OR']]
    phantom_scans = ifc.select('xnat:mrSessionData', ['xnat:mrSessionData/SESSION_ID', 'xnat:mrSessionData/DATE', 'xnat:mrSessionData/TIME']).where(constraints).items()
    # Still haven't found anything - then there is no phantom scan
    if len(phantom_scans) == 0:
        if args.sendmail:
            email.add_admin_message("%s %s - no phantom scan for %s, last modified %s (scanner: %s)" % (prj, edate, experiment_label, experiment_last_modified, scanner))
        else:
            error = 'No phantom scan.'
            slog.info(experiment_label,error,
                         project_id=prj,
                         experiment_id=seid,
                         experiment_date=edate)
    else:
        if args.warn_same_day_phantom:
            if args.sendmail:
                email.add_admin_message("%s %s - no same-day phantom scan for %s, last modified %s (scanner: %s), but found one within 24h" % (prj, edate, experiment_label, experiment_last_modified, scanner))
            else:
                error = "ERROR: no same-day phantom scan for session acquired;But found one within 24h"
                slog.info(experiment_label, error,
                              project_id = prj,
                              experiment_date = edate,
                              experiment_last_modified = experiment_last_modified,
                              scanner = scanner)


# Check one experiment for matching phantom scans
def check_experiment(eid, experiment):
    try:
        experiment_last_modified = experiment.attrs.get('last_modified')
        if experiment_last_modified == '':
            experiment_last_modified = experiment.attrs.get('insert_date')
        date_last_modified = time.strptime(experiment_last_modified[0:19], xnat_date_format ) # truncate ".###" fractional seconds by using only 0..19th characters
    except:
        # default to right now
        date_last_modified = time.localtime()

    experiment_last_modified = ''

    try:
        prj, sid, seid, experiment_label, edate, etime, scanner = experiment.attrs.mget(['project', 'subject_ID', 'ID', 'label', 'date', 'time', 'scanner'])
    except:
        error = "ERROR: failed to get data for experiment"
        slog.info(eid, error, 
                  info = "Please check if eid still exists in xnat. If not ignore error and otherwise run ./check_phantom_scans -e " + eid )
        return False

    subject_label_match = re.match(subject_id_pattern_nophantom, ifc.select.project(prj).subject(sid).label())
    if subject_label_match:
        # This is a dictionary that maps subjects who changed sites to the correct phantom.
        with open(os.path.join(sibis_config, 'special_cases.yml'), 'r') as fi:
            site_change_map = yaml.load(fi).get('site_change')
            phantom_scan_map = site_change_map.get('check_phantom_scans')

        changed_sites_phantom = phantom_scan_map.get(experiment_label)
        try:
            # If the subject changed sites, then use the correct site phantom ID.
            if changed_sites_phantom:
                phantom_label = changed_sites_phantom
                if args.verbose:
                    print "Phantom switched sites - checking ", phantom_label
            else : 
                phantom_label = "%s-99999-P-9" % subject_label_match.group(1)

            phantom_id = ifc.select.project(prj).subject( phantom_label ).attrs.get('ID')
            phantom_scans = ifc.array.experiments(experiment_type='xnat:mrSessionData', constraints={ 'xnat:mrSessionData/subject_id':phantom_id, 'date': edate})
            # handle check for phantoms on the same day but wrong scanner
            eids = phantom_scans.get('ID', always_list=True)
            phantom_scanners = [ifc.select.experiment(eid).attrs.get('scanner') for eid in eids]
            if args.verbose:
                print "Phantom scans: {0}".format(phantom_scans)
            if scanner not in phantom_scanners and len(phantom_scans) != 0:

                err = "Error: {0} - scanner mismatch for session {1} (scanner: {2}) and phantom {3} (scanner: {4}).".format(prj, experiment_label, scanner, eids, phantom_scanners)
                slog.info(experiment_label,err,
                              phantom_experiment_id = eids,
                              experiment_xnat_id=seid,
                              project = prj)
            elif len(phantom_scans) == 0:
                find_phantom_scan_24h(prj, experiment_label, seid, experiment_last_modified, phantom_id, edate, etime, scanner)
        except IndexError, e:
            error="ERROR: Subject likely switched sites if site_id > NCANDA_S01010"
            slog.info(experiment_label,error,
                          site_id=sid,
                          project=prj,
                          changed_sites_phantom = str(changed_sites_phantom),
                          subject_experiment_id=seid,
                          info = "Most likely entry missing for this visit in section 'check_phantom_scans' of file 'special_cases.yml'",  
                          error_msg = str(e) )
    return True    

#
# MAIN Section
#
parser = argparse.ArgumentParser()
parser.add_argument("-m", "--send-mail",
                    action="store_true",
                    dest="sendmail",
                    default=False,
                    help="Send emails with problem reports to users and site admin.")
parser.add_argument("-a", "--check-all",
                    action="store_true",
                    dest="check_all",
                    default=False,
                    help="Check all sessions, regardless of modification date.")
parser.add_argument("-w", "--warn-same-day-phantom",
                    action="store_true",
                    dest="warn_same_day_phantom",
                    default=False,
                    help="Warn if no same-day ADNI phantom scan was found "
                         "(default: warn only if no phantom scan within 24h).")
parser.add_argument("-e", "--experiment-id",
                    dest="eid",
                    default=False,
                    help="Check only session indicated, regardless of modification date.")
parser.add_argument("-v", "--verbose",
                    dest="verbose",
                    action='store_true',
                    help="Turn on verbose reporting.")
parser.add_argument("-p", "--post-to-github", help="Post all issues to GitHub instead of std out.", action="store_true")

parser.add_argument("-t","--time-log-dir",
                    help="If set then time logs are written to that directory (e.g. /fs/ncanda-share/ncanda-data-log/crond)",
                    action="store",
                    default=None)
args = parser.parse_args()

slog.init_log(args.verbose, args.post_to_github,'NCANDA XNAT', 'check_phantom_scans', args.time_log_dir)
slog.startTimer1()

#Create a sibispy session
session = sibispy.Session()
if not session.configure():
    if args.verbose:
        print "Error: session configure file was not found"

    sys.exit()

# Get the sibis config
sibis_config = session.get_operations_dir()
if not sibis_config :
    if args.verbose:
        print "Error: Could not retrieve configuration"

    sys.exit()

# Create interface using stored configuration
if args.verbose:
    print "Connecting to XNAT..."
ifc = session.connect_server('xnat',True)

if not ifc :
    if args.verbose:
        print "Error: Could not connect to XNAT"

    sys.exit()

ifc._memtimeout = 0

# RegExp pattern for subject IDs
subject_id_pattern_nophantom = '^([A-F])-[0-9]{5}-[MF]-[0-9]$'

# Date format for XNAT dates
xnat_date_format = '%Y-%m-%d %H:%M:%S'
now_str = time.strftime('%Y-%m-%d %H:%M:%S')

# Set up email object to contact users and admin
email = XnatEmail(ifc,session.get_email())

# Date (and time) when we last checked things
date_last_checked = time.localtime(0)
config_uri = '/data/config/pyxnat/check_phantom_scans'
try:
    content = ifc._exec('%s?format=json' % config_uri)
    creation_date = json.loads(content)['ResultSet']['Result'][0]['create_date']
    date_last_checked = time.strptime(creation_date[0:19], xnat_date_format)
    if args.verbose:
        print "Last checked on: {0}".format(time.strftime("%Y-%m-%d %H:%M:%S",
                                                          date_last_checked))
except:
    pass


experiment_ids = list()
count_phantom = 0

if args.eid:
    experiment_ids.append(args.eid)
else:
    # Get a list of all MR imaging sessions
    experiment_ids = ifc.select.experiments().get()

for eid in experiment_ids:
    # For each experiment, see if the override variable is set. Otherwise check it
    experiment = ifc.select.experiment(eid)
    try: 
        with sibispy.session.Capturing() as xnat_output: 
            exp_get = experiment.get()

    except Exception as e:
        slog.info(eid, "ERROR: failed to retrieve experiment from XNAT", 
                  info = "Please check if eid still exists in xnat. If not ignore error and otherwise run ./check_phantom_scans -e " + eid,
                  error_msg=str(e),
                  xnat_api_output = xnat_output)
        continue

    if get_custom_variable(eid, exp_get, 'phantommissingoverride') != True :
        count_phantom += 1
        check_experiment(eid, experiment)

if args.sendmail:
    email.send_all(ifc)

uri_addr='%s?inbody=true' % config_uri
try: 
    with sibispy.session.Capturing() as xnat_output: 
        content = ifc._exec(uri=uri_addr, method='PUT', body=now_str, headers={'content-type': 'text/plain'})
except Exception as e:
    slog.info(eid, "Warning: failed to update XNAT server location " +  uri_addr,
              error_msg=str(e),
              xnat_api_output = xnat_output)

slog.takeTimer1("script_time","{'TotalCheckedPhantoms': " + str(count_phantom) + "}")
