#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##
from __future__ import print_function
import argparse
import re
import sys

import sibispy
from sibispy import sibislogger as slog

# Setup command line parser

parser = argparse.ArgumentParser( description="Upload bulk set of ZIP archive files with physio (or, optionally, other data to XNAT." )
parser.add_argument( "-v", "--verbose", help="Verbose operation", action="store_true")
parser.add_argument( "-r", "--resource-name", help="Name of the resource to upload to.", default='physio' )
parser.add_argument( "-n", "--no-extract", help="Prevent extraction of the archive on the server.", action="store_true", default=False )
parser.add_argument( "zip_files", help="List of ZIP archive file names. Each archive must contain the physio files for one MR session, and the archive name must be the same as the session label in XNAT", nargs="+", action="store")
parser.add_argument("-p", "--post-to-github", help="Post all issues to GitHub instead of std out.", action="store_true")
parser.add_argument("-t","--time-log-dir",
                    help="If set then time logs are written to that directory",
                    action="store",
                    default=None)

args = parser.parse_args()

slog.init_log(args.verbose, args.post_to_github,'NCANDA XNAT', 'upload_bulk_physio', args.time_log_dir)
slog.startTimer1()

# Create interface using stored configuration
session = sibispy.Session()
if not session.configure():
    if args.verbose:
        print("Error: session configure file was not found")

    sys.exit()

# Open connection with XNAT server
ifc = session.connect_server('xnat',True)
if not ifc :
    if args.verbose:
        print("Error: Could not connect to XNAT")

    sys.exit()

records_uploaded = 0

for zfile in args.zip_files:
    experiment_label_pattern = '[A-FX]-[0-9]{5}-[MFPT]-[0-9]-20[0-9]{2}[01][0-9][0-3][0-9](-[0-9]){0,1}'
    match = re.match( '.*(' + experiment_label_pattern + ').*$', zfile )

    if not match:
        error = "ERROR: file name does not match valid experiment label"
        slog.info(zfile,error)
        continue

    try:
        experiment = ifc.select( 'xnat:mrSessionData', ['xnat:mrSessionData/PROJECT','xnat:mrSessionData/SUBJECT_ID','xnat:mrSessionData/SESSION_ID'] ).where( [ ('xnat:mrSessionData/LABEL','LIKE',match.group(1)) ] ).items()[0]
    except:
        error = "ERROR: session not found in XNAT"
        slog.info(match.group(1),error)
        continue

    try:
        ifc.select.project( experiment[0] ).subject( experiment[1] ).experiment( experiment[2] ).resource( args.resource_name ).put_zip( zfile, overwrite=True, extract=(not args.no_extract) )
        records_uploaded += 1
        print("SUCCESS: uploaded file",zfile,"to experiment",match.group(1))
    except:
        error = "ERROR: unable to upload ZIP filemto experiment"
        slog.info(zfile,error,
                      match.group(1))

slog.takeTimer1("script_time","{'records': " + str(len(args.zip_files)) + ", 'uploads': " +  str(records_uploaded) + "}")
