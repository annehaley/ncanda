#!/usr/bin/env python

##
##  See COPYING file distributed along with the ncanda-data-integration package
##  for the copyright and license terms
##

# Define command line options for this script
from optparse import OptionParser
parser = OptionParser()
parser.add_option("-f", "--force-updates", action="store_true", dest="force_updates", default=False, help="Force updates of QA analyses for all subject scan experiments.")
(options, args) = parser.parse_args()

# Create interface using stored configuration
import os
import pyxnat
interface = pyxnat.Interface( config = os.path.join( os.path.expanduser("~"), '.server_config/ncanda.cfg' ) )

# Date format for XNAT dates
import time
xnat_date_format = '%Y-%m-%d %H:%M:%S'
now_str = time.strftime( xnat_date_format )

# Date (and time) when we last checked things
import json
config_uri = '/data/config/pyxnat/fmri_qa_subject'
date_last_checked = time.localtime(0)
try:
    # Retrieve script config from XNAT server
    content = interface._exec( '%s?format=json' % config_uri )
    # Extract date this script was last run
    creation_date = json.loads( content )['ResultSet']['Result'][0]['create_date']
    date_last_checked = time.strptime( creation_date[0:19], xnat_date_format )
#    print 'Script was last run %s' % date_last_checked
except:
    # If we cannot get last script run date from server, leave at epoch (Jan 1, 1970)
    interface = pyxnat.Interface( config = os.path.join( os.path.expanduser("~"), '.server_config/ncanda.cfg' ) )

# For comparison - convert time of last check to string in XNAT date format
str_date_last_checked = time.strftime( xnat_date_format, date_last_checked )

# Now find all subject sessions and see which ones need to have QA done
import fmri_qa_functions as qa
# Search XNAT database for all Subjects (i.e., all non-phantoms)
subject_IDs = interface.select( 'xnat:subjectData', ['xnat:subjectData/SUBJECT_ID','xnat:subjectData/PROJECT']).where([('xnat:subjectData/SUBJECT_LABEL','NOT LIKE','%-P-%')]).items()
for [subject,project] in subject_IDs:
    # For each phantom subject (one per project), get the IDs and last_modified dates of all its imaging sessions
    sessions = interface.select( 'xnat:mrSessionData', ['xnat:mrSessionData/SESSION_ID','xnat:mrSessionData/LAST_MODIFIED'] ).where([('xnat:mrSessionData/SUBJECT_ID','LIKE',subject)]).items()

    # Iterate over all imaging sessions
    for [session,last_modified] in sessions:
        if (last_modified > str_date_last_checked) or options.force_updates:
            qa.process_subject_session( interface, project, subject, session, force_updates=options.force_updates )

# Finally, update config stored on the server to have current date/time as the time that this script was last run
content = interface._exec( uri='%s?inbody=true' % config_uri, method='PUT', body=now_str, headers={'content-type':'text/plain'} )
